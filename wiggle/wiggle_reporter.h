/*
 * wiggle_reporter.h
 *
 *  Created on: Jun 9, 2011
 *      Author: xin
 */

#ifndef WIGGLE_REPORTER_H_
#define WIGGLE_REPORTER_H_

#include <boost/make_shared.hpp>
#include <boost/shared_ptr.hpp>
#include "short_reads/reads.h"
#include "utils/logger.h"

#include <ostream>
#include <stdint.h>
#include <iostream>

class wiggle_reporter {
public:
    wiggle_reporter() {
        use_default_setting();
        setWiggleName("WIG generated by PeakRanger");
    }

    virtual ~wiggle_reporter() {
    }

    void setup();

    virtual void export_wiggle(Reads &reads, std::ostream &os);

    virtual void export_wiggle(std::vector<uint32_t> &preads,
                               std::vector<uint32_t> &nreads, std::string chr, std::ostream &os);

    typedef std::vector<std::pair<uint32_t, double> > data_type;
    typedef std::pair<uint32_t, double> element_type;

    virtual void export_wiggle(Reads &reads, data_type &result) {
    };

    virtual void export_wiggle(Reads &reads, const char *file);

    virtual void split_export_wiggle(Reads &reads, std::ostream &os);

    virtual void split_export_wiggle(Reads &reads, const char *file);

    virtual void export_wiggle_gzip(Reads &reads, const char *file);

    virtual void split_export_wiggle_gzip(Reads &reads, const char *file);

    void use_default_setting();

    std::vector<uint32_t> getColorRGB() const;

    uint32_t getPriority() const;

    uint32_t getViewLimitDown() const;

    uint32_t getViewLimitUp() const;

    std::string getWiggleName() const;

    void setColorRGB(std::vector<uint32_t> _colorRGB);

    void setPriority(uint32_t _priority);

    void setViewLimitDown(uint32_t _viewLimitDown);

    void setViewLimitUp(uint32_t _viewLimitUp);

    void setWiggleName(std::string _wiggleName);

    uint32_t getBinlength() const;

    void setBinlength(uint32_t _binlength);

    uint32_t getReadextlength() const;

    void setReadextlength(uint32_t _readextlength);

    uint32_t getReadlength() const;

    void setReadlength(uint32_t _readlength);

    void print_wig(data_type &reads_count, std::ostream &os);

protected:
    virtual void _process(uint32_t start, uint32_t end, uint32_t readlength,
                          uint32_t readextlength, std::vector<uint32_t>::iterator readsStart,
                          std::vector<uint32_t>::iterator readsEnd,
                          std::vector<uint32_t>::iterator nreadsStart,
                          std::vector<uint32_t>::iterator nreadsEnd, std::ostream &os);

    uint32_t _viewLimitDown;
    uint32_t _viewLimitUp;
    std::string _wiggleName;
    std::vector<uint32_t> _colorRGB;
    uint32_t _priority;
    uint32_t _readextlength;
    uint32_t _readlength;
    uint32_t _binlength;
};

#endif /* WIGGLE_REPORTER_H_ */
